2013-09-09  PELICAN 1.0.4

    * Fixed a bug where the chunker next() method would not be called
      in cases where there was data left to be read in the open device buffer
      but the readyRead() signal was not being emitted as new data was not 
      arriving.
    * Updated the emulator driver to block write operations for all device 
      types between calls to an emulator's getPacketData() method until 
      all data has been written the the target device.
    * Added method to the data buffer classes, the data manager class, and
      the abstract chunker which report the status of data buffers.
      These are intended to be available for chunker writers to be able
      to monitor the status of the buffers they are writing to. Please note
      that some of these functions incur a performance cost so should be used
      carefully.
    * Added method to stop emulator drivers.
    * Updates to example-2, added in 1.0.3.
        - Emulators no longer needs a Qt Application event loop. This allows
          emulators to finish naturally when they have completed sending data.
          A new emulator binary main() has been written to demonstrate this.
        - Updated the format of the data sent from the emulator to contain
          a configurable value which determines the frequency of benchmark
          reporting.
        - The emulator now blocks, with a timeout, in its createDevice() method
          until a connection with the server can be made. The timeout is 
          configurable in the XML.
        - Improved consistency of benchmark reporting.
        - Added reporting of the data buffer status from within the chunker
          to demonstrate the capability of the new data buffer status functions.


2013-06-26  PELICAN 1.0.3

    * Fixed a bug in the emulator driver related to non-blocking write
      operations when sending QTcp packets.
    * Updated the logic of the DataReciever class to allow chunkers to
      reconnect to dropped sockets.
    * Added an example to demonstrate an emulator, server, and pipeline
      configuration using a TCP/IP based chunker. This example has been designed
      to report the throughput bandwidth for such a system.
    * Updated handling of default TCP communication between the pelican server
      and pelican server client to blocking socket operations - This is not
      envisaged to alter the behaviour of existing code using pelican.


2013-01-29  PELICAN 1.0.2

    * Updated version number in doxygen targets
    * Updated FindPelican.cmake script to fix an issue for projects
      using an install of pelican in a non-default install location.

2013-01-22  PELICAN 1.0.1

    * Adding missing build_macros cmake script!

2013-01-21  PELICAN 1.0.0

    * First versioned release!
    * Complete rework of the modular build system.
    * Rework of the build system macro for copying files.
    * Updated header include paths thoughout pelican, removing the pelican
      prefix. Projects using FindPelican.cmake will need to update to the
      new version of this script.
    * Updated Doxygen documentation configuration files to work correctly with
      Doxygen 1.8.x.
    * Moved object registration macros out of pelican namespace in order
      to make code using PELICAN slightly cleaner. This change will not effect
      codes already using PELICAN but allow more friendly namespace usage
      in future. Macros affected:
         PELICAN_DECLARE_ADAPTER
         PELICAN_DECLARE_CLIENT
         PELICAN_DECLARE_MODULE
         PELICAN_DECLARE_DATABLOB
         PELICAN_DECLARE_CHUNKER
    * Added an additional example code (examples/example-1) which demonstrates
      the use of pelican with service data.

